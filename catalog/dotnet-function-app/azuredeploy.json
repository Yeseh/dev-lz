{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "15405067265643825935"
    }
  },
  "parameters": {
    "environment": {
      "type": "string",
      "defaultValue": "dev"
    },
    "slug": {
      "type": "string"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.144.0.0/20"
    }
  },
  "variables": {
    "subnetAddressPrefix": "[cidrSubnet(parameters('vnetAddressPrefix'), 24, 0)]"
  },
  "resources": {
    "nsg": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('nsg-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environment": {
            "value": "[parameters('environment')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          },
          "whitelistIps": {
            "value": []
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "10431210573992308911"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "The Azure resource location."
              }
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "",
                "dev",
                "test",
                "prod"
              ]
            },
            "whitelistIps": {
              "type": "array",
              "metadata": {
                "description": "The IP addresses that are allowed access."
              }
            },
            "slug": {
              "type": "string"
            }
          },
          "variables": {
            "nsgName": "[if(empty(parameters('environment')), format('nsg-{0}', parameters('slug')), format('nsg-{0}-{1}', parameters('slug'), parameters('environment')))]",
            "nsgRules": "[map(range(0, length(parameters('whitelistIps'))), lambda('i', createObject('name', format('Allow-{0}-Inbound', parameters('whitelistIps')[lambdaVariables('i')]), 'properties', createObject('access', 'Allow', 'destinationAddressPrefix', 'VirtualNetwork', 'destinationPortRange', '*', 'direction', 'Inbound', 'priority', add(200, lambdaVariables('i')), 'protocol', '*', 'sourceAddressPrefix', parameters('whitelistIps')[lambdaVariables('i')], 'sourcePortRange', '*'))))]"
          },
          "resources": {
            "nsg": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-05-01",
              "name": "[variables('nsgName')]",
              "location": "[parameters('location')]",
              "properties": {
                "securityRules": "[variables('nsgRules')]"
              }
            }
          },
          "outputs": {
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
            },
            "nsgName": {
              "type": "string",
              "value": "[variables('nsgName')]"
            }
          }
        }
      }
    },
    "vnet": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vnet-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          },
          "networkSecurityGroupId": {
            "value": "[reference('nsg').outputs.nsgId.value]"
          },
          "subnetAddressPrefix": {
            "value": "[variables('subnetAddressPrefix')]"
          },
          "vnetAddressPrefixes": {
            "value": [
              "[parameters('vnetAddressPrefix')]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "5020305178884063203"
            }
          },
          "parameters": {
            "environment": {
              "type": "string",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "",
                "dev",
                "test",
                "acc",
                "prod"
              ]
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The Azure resource location."
              }
            },
            "slug": {
              "type": "string",
              "metadata": {
                "description": "Shorthand name for making resource names"
              }
            },
            "networkSecurityGroupId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the network security group."
              }
            },
            "vnetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "The prefixes for the VNET IP address."
              }
            },
            "subnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "The prefix for the default subnet IP addresses."
              }
            },
            "dnsZones": {
              "type": "array",
              "defaultValue": [
                "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
                "[format('privatelink.file.{0}', environment().suffixes.storage)]",
                "[format('privatelink.queue.{0}', environment().suffixes.storage)]",
                "[format('privatelink.table.{0}', environment().suffixes.storage)]",
                "[format('privatelink{0}', environment().suffixes.keyvaultDns)]"
              ],
              "metadata": {
                "description": "The DNS zones."
              }
            }
          },
          "variables": {
            "vnetName": "[if(empty(parameters('environment')), format('vnet-{0}', parameters('slug')), format('vnet-{0}-{1}', parameters('slug'), parameters('environment')))]"
          },
          "resources": {
            "vnet": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2022-05-01",
              "name": "[variables('vnetName')]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": "[parameters('vnetAddressPrefixes')]"
                }
              }
            },
            "privateDnsZones": {
              "copy": {
                "name": "privateDnsZones",
                "count": "[length(parameters('dnsZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('dnsZones')[copyIndex()]]",
              "location": "global",
              "dependsOn": [
                "vnet"
              ]
            },
            "pdnsVnetLinks": {
              "copy": {
                "name": "pdnsVnetLinks",
                "count": "[length(parameters('dnsZones'))]"
              },
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', parameters('dnsZones')[copyIndex()], last(split(resourceId('Microsoft.Network/virtualNetworks', variables('vnetName')), '/')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": true,
                "virtualNetwork": {
                  "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                }
              },
              "dependsOn": [
                "[format('privateDnsZones[{0}]', copyIndex())]",
                "vnet"
              ]
            },
            "defaultSnet": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('defaultsnet-{0}', variables('vnetName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[variables('vnetName')]"
                  },
                  "subnetName": {
                    "value": "default"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "addressPrefix": {
                    "value": "[parameters('subnetAddressPrefix')]"
                  },
                  "networkSecurityGroupId": {
                    "value": "[parameters('networkSecurityGroupId')]"
                  },
                  "enablePrivateEndpointNetworkPolicies": {
                    "value": true
                  },
                  "serviceEndpointServices": {
                    "value": [
                      "Microsoft.Storage",
                      "Microsoft.KeyVault"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "1.10-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "2372966553005701899"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "VNet to create the subnet in"
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The azure location for service endpoints"
                      }
                    },
                    "delegationService": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "The name of the service the subnet should be delegated to."
                      }
                    },
                    "serviceEndpointServices": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Serivce endpoints to enable on the subnet."
                      }
                    },
                    "subnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the subnet"
                      }
                    },
                    "networkSecurityGroupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Network security group ID to link to the vnet"
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "Address prefix for the subnet"
                      }
                    },
                    "enablePrivateEndpointNetworkPolicies": {
                      "type": "bool",
                      "defaultValue": false
                    }
                  },
                  "variables": {
                    "serviceEndpoints": "[map(parameters('serviceEndpointServices'), lambda('endpoint', createObject('locations', createArray(parameters('location')), 'service', lambdaVariables('endpoint'))))]",
                    "delegations": "[if(not(equals(parameters('delegationService'), '')), createArray(createObject('name', replace(parameters('delegationService'), '/', '_'), 'properties', createObject('serviceName', parameters('delegationService')))), createArray())]"
                  },
                  "resources": {
                    "vnet": {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('vnetName')]"
                    },
                    "snet": {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                      "properties": {
                        "privateEndpointNetworkPolicies": "[if(parameters('enablePrivateEndpointNetworkPolicies'), 'Enabled', 'Disabled')]",
                        "networkSecurityGroup": {
                          "id": "[parameters('networkSecurityGroupId')]"
                        },
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "serviceEndpoints": "[variables('serviceEndpoints')]",
                        "delegations": "[variables('delegations')]"
                      },
                      "dependsOn": [
                        "vnet"
                      ]
                    }
                  },
                  "outputs": {
                    "snetId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "vnet"
              ]
            }
          },
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            },
            "vnetName": {
              "type": "string",
              "value": "[variables('vnetName')]"
            },
            "defaultSnetId": {
              "type": "string",
              "value": "[reference('defaultSnet').outputs.snetId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "nsg"
      ]
    },
    "law": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('law-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "9249548172519935533"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The Azure resource location."
              }
            },
            "slug": {
              "type": "string"
            },
            "environment": {
              "type": "string",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "",
                "dev",
                "test",
                "acc",
                "prod"
              ]
            }
          },
          "variables": {
            "lawsName": "[if(empty(parameters('environment')), format('laws-{0}', parameters('slug')), format('laws-{0}-{1}', parameters('slug'), parameters('environment')))]"
          },
          "resources": {
            "logAnalyticsWorkspace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[variables('lawsName')]",
              "location": "[parameters('location')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 0,
                "features": {
                  "enableLogAccessUsingOnlyResourcePermissions": false
                }
              }
            }
          },
          "outputs": {
            "workspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('lawsName'))]"
            },
            "workspaceName": {
              "type": "string",
              "value": "[variables('lawsName')]"
            }
          }
        }
      }
    },
    "kv": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('kv-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "environment": {
            "value": "[parameters('environment')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference('law').outputs.workspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "17868888039603934979"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The Azure resource location."
              }
            },
            "slug": {
              "type": "string",
              "metadata": {
                "description": "Small identifier for the project, used to build resource names."
              },
              "maxLength": 10
            },
            "environment": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "",
                "dev",
                "test",
                "acc",
                "prod"
              ]
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The Log Analytics Workspace ID to send keyvault logs to."
              }
            },
            "whitelistIps": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The IP addresses that are allowed to communicate with the Key Vault."
              }
            },
            "subnetIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of subnet IDs that are allowed to access the keyvault."
              }
            },
            "privateEndpointSubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The ID of the subnet to place the KV private endpoint in. If empty, no private endpoint will be created."
              }
            },
            "privateDnsZoneId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The ID of the private DNS zone."
              }
            },
            "allowPublicAccess": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "kvIpRules": "[map(range(0, length(parameters('whitelistIps'))), lambda('i', createObject('value', format('{0}', parameters('whitelistIps')[lambdaVariables('i')]))))]",
            "kvSubnetRules": "[map(range(0, length(parameters('subnetIds'))), lambda('i', createObject('id', format('{0}', parameters('subnetIds')[lambdaVariables('i')]))))]",
            "kvName": "[if(empty(parameters('environment')), format('kv-{0}', parameters('slug')), format('kv-{0}-{1}', parameters('slug'), parameters('environment')))]",
            "privateEndpointName": "[format('pep-{0}', variables('kvName'))]"
          },
          "resources": {
            "keyVault": {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-07-01",
              "name": "[variables('kvName')]",
              "location": "[parameters('location')]",
              "properties": {
                "enabledForDeployment": true,
                "enabledForTemplateDeployment": true,
                "enabledForDiskEncryption": true,
                "enableRbacAuthorization": true,
                "tenantId": "[subscription().tenantId]",
                "sku": {
                  "name": "standard",
                  "family": "A"
                },
                "networkAcls": {
                  "defaultAction": "[if(parameters('allowPublicAccess'), 'Allow', 'Deny')]",
                  "virtualNetworkRules": "[variables('kvSubnetRules')]",
                  "ipRules": "[variables('kvIpRules')]"
                },
                "enablePurgeProtection": true,
                "softDeleteRetentionInDays": 7,
                "enableSoftDelete": true
              }
            },
            "keyVaultDiag": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', variables('kvName'))]",
              "name": "keyVaultDiagnosticSettings",
              "properties": {
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  },
                  {
                    "categoryGroup": "audit",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyVaultPep": {
              "condition": "[not(empty(parameters('privateEndpointSubnetId')))]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-05-01",
              "name": "[variables('privateEndpointName')]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('privateEndpointSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[variables('privateEndpointName')]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('kvName'))]",
                      "groupIds": [
                        "vault"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "keyVault"
              ]
            },
            "keyvaultPdnsZoneGroup": {
              "condition": "[not(empty(parameters('privateEndpointSubnetId')))]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', variables('privateEndpointName'), 'kvPrivateDns')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "vault",
                    "properties": {
                      "privateDnsZoneId": "[parameters('privateDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "keyVaultPep"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "value": "[variables('kvName')]"
            },
            "vaultUri": {
              "type": "string",
              "value": "[reference('keyVault').vaultUri]"
            }
          }
        }
      },
      "dependsOn": [
        "law"
      ]
    },
    "asp": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('asp-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "18404952992579296718"
            }
          },
          "parameters": {
            "environment": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "",
                "test",
                "acc",
                "dev",
                "prod"
              ]
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "slug": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "defaultValue": "linux",
              "allowedValues": [
                "linux",
                "windows"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": {
                "name": "B1",
                "tier": "Basic"
              }
            }
          },
          "variables": {
            "aspName": "[if(empty(parameters('environment')), format('asp-{0}', parameters('slug')), format('asp-{0}-{1}', parameters('slug'), parameters('environment')))]"
          },
          "resources": {
            "asp": {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-03-01",
              "name": "[variables('aspName')]",
              "location": "[parameters('location')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "reserved": "[equals(parameters('kind'), 'linux')]"
              },
              "sku": "[parameters('sku')]"
            }
          },
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/serverfarms', variables('aspName'))]"
            }
          }
        }
      }
    },
    "fnApp": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('fn-{0}-{1}', parameters('slug'), parameters('environment'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "appServicePlanId": {
            "value": "[reference('asp').outputs.id.value]"
          },
          "env": {
            "value": "[parameters('environment')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference('law').outputs.workspaceId.value]"
          },
          "slug": {
            "value": "[parameters('slug')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "6192269731881409650"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure location to deploy the resources to"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the log analytics workspace to stream function logs to"
              }
            },
            "appServicePlanId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the app service plan to use"
              }
            },
            "slug": {
              "type": "string",
              "metadata": {
                "description": "The name of the function app, without prefixes"
              }
            },
            "env": {
              "type": "string",
              "metadata": {
                "description": "The environment this module is deployed to."
              },
              "allowedValues": [
                "dev",
                "prd"
              ]
            },
            "delegationSubnetId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "ID of the subnet to delegate to the function app"
              }
            },
            "functionWorkerRuntime": {
              "type": "string",
              "defaultValue": "dotnet",
              "allowedValues": [
                "dotnet",
                "dotnet-isolated",
                "node",
                "python",
                "java",
                "custom"
              ],
              "metadata": {
                "description": "The runtime to use for the function app"
              }
            },
            "functionWorkerProcessCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "The number of function worker processes to run"
              },
              "maxValue": 10
            },
            "whitelistIps": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "functionAppName": "[format('fn-{0}-{1}', parameters('slug'), parameters('env'))]",
            "dehyphenatedAppName": "[replace(variables('functionAppName'), '-', '')]",
            "storageAccountName": "[format('st{0}', variables('dehyphenatedAppName'))]",
            "storageIpRules": "[map(range(0, length(parameters('whitelistIps'))), lambda('i', createObject('action', 'Allow', 'value', parameters('whitelistIps')[lambdaVariables('i')])))]"
          },
          "resources": {
            "fnStorage::fileService::fnShare": {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', variables('storageAccountName'), 'default', toLower(variables('functionAppName')))]",
              "dependsOn": [
                "fnStorage::fileService"
              ]
            },
            "fnStorage::fileService": {
              "type": "Microsoft.Storage/storageAccounts/fileServices",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}', variables('storageAccountName'), 'default')]",
              "dependsOn": [
                "fnStorage"
              ]
            },
            "fnStorage": {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2022-09-01",
              "name": "[variables('storageAccountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2",
              "properties": {
                "accessTier": "Hot",
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "supportsHttpsTrafficOnly": true,
                "networkAcls": {
                  "defaultAction": "Deny",
                  "ipRules": "[variables('storageIpRules')]",
                  "virtualNetworkRules": [
                    {
                      "id": "[parameters('delegationSubnetId')]"
                    }
                  ]
                }
              }
            },
            "appInsights": {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[format('ai-{0}', variables('functionAppName'))]",
              "location": "[parameters('location')]",
              "kind": "other",
              "properties": {
                "Application_Type": "web",
                "Flow_Type": "Bluefield",
                "Request_Source": "CustomDeployment",
                "WorkspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]"
              }
            },
            "fnApp": {
              "type": "Microsoft.Web/sites",
              "apiVersion": "2022-03-01",
              "name": "[variables('functionAppName')]",
              "location": "[parameters('location')]",
              "kind": "functionapp",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "publicNetworkAccess": "Enabled",
                "serverFarmId": "[parameters('appServicePlanId')]",
                "siteConfig": {
                  "appSettings": [
                    {
                      "name": "AzureWebJobsStorage",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2022-09-01').keys[0].value)]"
                    },
                    {
                      "name": "WEBSITE_CONTENTSHARE",
                      "value": "[toLower(variables('functionAppName'))]"
                    },
                    {
                      "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
                      "value": "true"
                    },
                    {
                      "name": "FUNCTIONS_EXTENSION_VERSION",
                      "value": "~4"
                    },
                    {
                      "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                      "value": "[reference('appInsights').InstrumentationKey]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_RUNTIME",
                      "value": "[parameters('functionWorkerRuntime')]"
                    },
                    {
                      "name": "FUNCTIONS_WORKER_PROCESS_COUNT",
                      "value": "[format('{0}', parameters('functionWorkerProcessCount'))]"
                    },
                    {
                      "name": "WEBSITE_VNET_ROUTE_ALL",
                      "value": "1"
                    },
                    {
                      "name": "WEBSITE_CONTENTOVERVNET",
                      "value": "1"
                    },
                    {
                      "name": "WEBSITE_DNS_SERVER",
                      "value": "168.63.129.16"
                    }
                  ]
                }
              },
              "dependsOn": [
                "appInsights",
                "fnStorage"
              ]
            },
            "functionAppName_virtualNetwork": {
              "condition": "[not(equals(parameters('delegationSubnetId'), ''))]",
              "type": "Microsoft.Web/sites/networkConfig",
              "apiVersion": "2022-03-01",
              "name": "[format('{0}/{1}', variables('functionAppName'), 'virtualNetwork')]",
              "properties": {
                "subnetResourceId": "[parameters('delegationSubnetId')]",
                "swiftSupported": true
              },
              "dependsOn": [
                "fnApp"
              ]
            },
            "fnAppDiag": {
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/sites/{0}', variables('functionAppName'))]",
              "name": "fnAppDiag",
              "properties": {
                "logs": [
                  {
                    "categoryGroup": "allLogs",
                    "enabled": true
                  },
                  {
                    "categoryGroup": "audit",
                    "enabled": true
                  }
                ],
                "metrics": [
                  {
                    "category": "AllMetrics",
                    "enabled": true
                  }
                ],
                "workspaceId": "[parameters('logAnalyticsWorkspaceId')]"
              },
              "dependsOn": [
                "fnApp"
              ]
            }
          },
          "outputs": {
            "functionAppManagedIdentityPrincipalId": {
              "type": "string",
              "value": "[reference('fnApp', '2022-03-01', 'full').identity.principalId]"
            },
            "functionAppId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
            },
            "functionAppUrl": {
              "type": "string",
              "value": "[reference('fnApp').defaultHostName]"
            }
          }
        }
      },
      "dependsOn": [
        "asp",
        "law"
      ]
    }
  }
}